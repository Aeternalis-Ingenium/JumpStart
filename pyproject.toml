[build-system]
requires = ["setuptools>=69.0"]
build-backend = "setuptools.build_meta"

[project]
name = "jumpstart"
description = "A template for API application with FastAPI, Docker, Pre-Commit, and GitHub Actions"
readme = "README.md"
version = "1.0.0"
requires-python = ">=3.12"
authors = [
    {name = "Nino Lindenberg", email = "aeternalis-ingenium@proton.me"}
]
keywords = [
    "software engineering",
    "api application",
    "application template",
]
classifiers = [
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.109.0",
    "pydantic>=2.5.3",
    "pydantic-settings>=2.1.0",
    "pydantic_core>=2.14.6",
    "python-multipart>=0.0.6",
    "setuptools>=69.0.3",
    "uvicorn>=0.26.0",
    "wheel>=0.42.0",
]

[project.urls]
repository = "https://github.com/Aeternalis-Ingenium/JumpStart"
documentation = "https://github.com/Aeternalis-Ingenium/JumpStart/blob/trunk/README.md"

[project.optional-dependencies]
linter = [
    "black>=23.12.1",
    "colorama>=0.4.6",
    "isort>=5.13.2",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]
security = ["bandit>=1.7.6"]
test = ["pytest-cov>=4.1.0", "asgi-lifespan>=2.1.0", "trio>=0.24.0", "httpx>=0.26.0"]

[tool.bandit]
exclude_dirs = ["tests"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.black]
color=true
exclude = '''
    /(
        \.git
        | \._build
        | \.back.out
        | \.build
        | \.coverage
        | \.dist
        | \.hg
        | \.mypy_cache
        | \.tox
        | \.venv
        | ./src/coverage
        | blib2to3
        | ./tests
    )/
'''
include = '\.pyi?$'
line-length = 119

[tool.isort]
color_output = true
combine_as_imports = true
ensure_newline_before_comments = true
force_alphabetical_sort_within_sections = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 119
lines_between_sections = 1
multi_line_output = 3
profile = "black"
skip = [
    ".coverage",
    "coverage/*",
    "cov.*",
    ".dockerignore",
    ".env",
    ".github/*",
    ".gitignore",
    ".html",
    ".md",
    ".python-version",
    ".rst",
    ".xml"
]
skip_gitignore = true
src_paths = [
    "src/",
    "tests/",
]
use_parentheses = true

[tool.mypy]
check_untyped_defs = true
color_output = true
error_summary = true
exclude = "(build|data|dist|docs/src|images|logo|logs|output)/"
ignore_missing_imports = true
pretty = true
strict_optional = true
warn_no_return = true
warn_return_any = false
files = "src/"

[tool.pytest.ini_options]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test", "Acceptance"]
python_functions = ["test_*"]
testpaths = ["tests"]
filterwarnings = "error"
addopts = '''
    --verbose
    -p no:warnings
    --strict-markers
    --tb=short
    --cov=src
    --cov=tests
    --cov-branch
    --cov-report=term-missing
    --cov-report=html:coverage/cov_html
    --cov-report=xml:coverage/cov.xml
    --no-cov-on-fail
    --cov-fail-under=80
'''
plugins = [
    "anyio",
    "cov",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "def __repr__",
    "    ...",
]
fail_under = 80
precision = 1
skip_empty = true
sort = "-Cover"
